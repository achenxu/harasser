#! /usr/bin/env node

var cli = require('cli')
var async = require('async')
var fs = require('fs')
var request = require('request')
var _ = require('lodash')
var pkg = require('./package.json')
var EXIT_CONDITION = false
cli.enable('help', 'version', 'status')
cli.setApp('harass', pkg.version)
var iterOpts = [ 'i', 'number of iterations', 'number' ]
var bandwidthOpts = [ 'b', 'number of calls to run simultaneously', 'number', '10' ]
var repeatOpts = [ 'r', 'time (ms) between repeating call', 'number', '1000' ]
var methodUrlOpts = [ 'a', 'append method to url to call', 'boolean', false ]
var headersOpts = [ 'h', 'headers, comma delineated', 'string', 'Host:httpbin.org' ]
var includeFormOpts = [ 'f', 'include calls with application/x-form-urlencoded bodies', 'boolean', false]
var fileTypesOpts = [ 't', 'which filetypes to send in calls, randomly assigned', 'string', 'css,csv,gif,html,ico,jpg,js,json,md,png,svg,txt,xml,yml' ]
var methodOpts = [ 'm', 'methods of HTTP calls to send, comma-delineated', 'string', 'post,get,put,patch,delete' ]
var options = cli.parse({
  iterations: iterOpts,
  bandwidth: bandwidthOpts,
  repeat: repeatOpts,
  methods: methodOpts,
  append: methodUrlOpts,
  headers: headersOpts,
  filetypes: fileTypesOpts,
  includeform: includeFormOpts
})
var iterations = 0
cli.main(function (args, options) {
  urlToCall = args[0] || 'http://localhost:8000'
  options.urlToCall = urlToCall
  options.methods = options.methods.split(',')
  options.methods = options.methods.map(function (type) {
    type = type.trim().toLowerCase()
    return type
  })
  if (options.headers.indexOf(',') > -1) {
    options.headers = options.headers.split(',')
  } else {
    options.headers = [options.headers]
  }
  if (options.filetypes.indexOf(',') > -1) {
    options.filetypes = options.filetypes.split(',')
  } else {
    options.filetypes = [options.filetypes]
  }
  options.headers = _.map(options.headers, function (header) {
    header = header.split(':')
    return {
      name: header[0].trim(),
      value: header[1].trim()
    }
  })
  // process.exit()
  runCalls(options)
})
function sleep (milliseconds) {
  var start = new Date().getTime()
  for (var i = 0; i < 1e7; i++) {
    if ((new Date().getTime() - start) > milliseconds) {
      break
    }
  }
}
function runCalls (options) {
  var callsArray = []
  for (var i = 0; i < options.bandwidth; i++) {
    var callFunction = new Promise(function (resolve, reject) {
      var randomIndex = getRandom(0, options.methods.length)
      var randomMethod = options.methods[randomIndex]
      var method = randomMethod.toUpperCase()
      var requestHeaders = {}
      _.forEach(options.headers, function (header) {
        requestHeaders[header.name] = header.value
      })
      var urlToCall = options.urlToCall
      if (options.append) {
        urlToCall = options.urlToCall + '/' + randomMethod
      }
      console.log('requesting', method, urlToCall)
      opts = {
        method: method,
        url: urlToCall,
        headers: requestHeaders,
        har: {
          url: urlToCall,
          method: method,
          headers: options.headers,
          postData: {
            mimeType: '',
            params: []
          }
        }
      }
      var bodyAccepted = (method !== 'GET' && method !== 'DELETE' && method !== 'HEAD')
      var fileStream = false
      if (bodyAccepted) {
        var randomNumber = getRandom(0, 8)
        if (randomNumber < 3 && options.includeform) {
          opts.headers['X-Filetype'] = 'Form Data'
          opts.har.headers.push({ name: 'X-Filetype', value: 'Form Data' })
          opts.har.postData.mimeType = 'application/x-www-form-urlencoded'
          opts.har.postData.params = [
            {
              name: 'my_field',
              value: 'my_value'
            },
            {
              name: 'my_field1',
              value: 'my_value1'
            },
            {
              name: 'my_field2',
              value: 'my_value2'
            },
            {
              name: 'my_field3',
              value: 'my_value3'
            },
            {
              name: 'my_field4',
              value: 'my_value4'
            }
          ]
        } else {
          fileStream = true
          delete opts.har
        }
      }
      if (bodyAccepted && fileStream) {
        var allFileTypes = [
          {mimeType: 'text/css', extension: 'css'},
          {mimeType: 'text/csv', extension: 'csv'},
          {mimeType: 'image/gif', extension: 'gif'},
          {mimeType: 'text/html', extension: 'html'},
          {mimeType: 'image/x-icon', extension: 'ico'},
          {mimeType: 'image/jpeg', extension: 'jpg'},
          {mimeType: ['text/javascript', 'application/javascript', 'text/ecmascript', 'application/ecmascript', 'application/x-javascript'], extension: 'js'},
          {mimeType: 'application/json', extension: 'json'},
          {mimeType: 'text/x-markdown', extension: 'md'},
          {mimeType: ['image/png', 'application/png', 'application/x-png'], extension: 'png'},
          {mimeType: 'image/svg+xml', extension: 'svg'},
          {mimeType: 'text/plain', extension: 'txt'},
          {mimeType: 'text/xml', extension: 'xml'},
          {mimeType: ['text/yaml', 'application/x-yaml'], extension: 'yml'}
        ]
        var fileTypes = _.map(options.filetypes, function (extension) {
          var thisFileType = _.find(allFileTypes, {extension: extension})
          return thisFileType
        })
        if (!fileTypes.length) {
          throw new Error('No valid filetypes selected. Please try again.')
          process.exit()
        }
        var fileType = fileTypes[getRandom(0, fileTypes.length)]
        if (_.isArray(fileType.mimeType)) {
          fileType.mimeType = fileType.mimeType[getRandom(0, fileType.mimeType.length)]
        }
        opts.headers['X-Filetype'] = fileType.extension
        opts.headers['Content-Type'] = fileType.mimeType
        try {
          var file = fs.createReadStream(__dirname + '/fixtures/test.' + fileType.extension)
          file.pipe(request(opts))
          var buffer = ''
          file.on('data', function (chunk) {
            buffer += chunk
          })
          file.on('error', function (chunk) {
            console.error(err)
            resolve(err)
          })
          file.on('end', function () {
            console.log(method, urlToCall, new Date())
            resolve(buffer)
          })
        } catch(e) {
          console.error(err)
          resolve(err)
        }
      } else {
        request(opts, function (err, results) {
          if (err) {
            console.error(err)
          // process.exit()
          }
          console.log(method, urlToCall, new Date())
          resolve(results)
        })
      }
    })
    callsArray.push(callFunction)
  }
  Promise.all(callsArray).then(function (results) {
    iterations++
    console.log('finished iteration', iterations)
    sleep(options.repeat)
    if (options.iterations) {
      if (iterations < options.iterations) {
        runCalls(options)
      } else {
        EXIT_CONDITION = true
      }
    } else {
      runCalls(options)
    }
  }).catch(function (error) {
    console.error(error)
    process.exit()
  })
}
function getRandom (min, max) {
  return Math.floor(Math.random() * (max - min) + min)
}
function utf8_to_b64 (str) {
  return new Buffer(str).toString('base64')
}
(function wait () {
  if (!EXIT_CONDITION) setTimeout(wait, 1000)
})()
